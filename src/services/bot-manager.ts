import {Deployment} from "../models/deployment";
import {BOT_PER_INSTANCE_LIMIT, ENV} from "../environment";

interface DeployedInstances {
	latestBuild: Deployment[];
	previousBuilds: Deployment[];
}

export class BotManager {

	private static currentDeploymentId: string; 					// Random string generated by AWS for deployment folder is S3
	private static deployInstances: DeployedInstances = {		// Crypto bot instance public DNS strings
		latestBuild: [],											// List of public DNS for current / latest build
		previousBuilds: []											// DNS for old builds get moved here from latestBuild array if new build is deployed
	};

	public static SetCurrentDeploymentId = (deploymentId: string): string => BotManager.currentDeploymentId = deploymentId;
	public static SetLatestBuilds = (builds: Deployment[]): void => {
		if (BotManager.deployInstances.latestBuild.length) return;
		BotManager.deployInstances.latestBuild = builds;
	}
	public static SetPreviousBuilds = (builds: Deployment[]): void => {
		if (BotManager.deployInstances.previousBuilds.length) return;
		BotManager.deployInstances.previousBuilds = builds;
	}
	public static GetAllBuilds = (): DeployedInstances => BotManager.deployInstances;

	public static RegisterNewBuild = (deploymentId: string, newInstanceDNS: string): void => {
		BotManager.currentDeploymentId = deploymentId;
		BotManager.deployInstances.previousBuilds = [
			...BotManager.deployInstances.previousBuilds,
			...BotManager.deployInstances.latestBuild
		];
		BotManager.deployInstances.latestBuild = [ new Deployment(newInstanceDNS, BotManager.currentDeploymentId) ];
	}

	public static CreateTradeBot = (botId: string): void => {
		const deployment: Deployment = BotManager.GetDeploymentWithMostBots();
		if (deployment) deployment.AddNewBot(botId);
		else console.error('NO DEPLOYMENTS LEFT')
	}

	private static GetDeploymentWithMostBots = (): Deployment => { // Return the deployment with most bots less than limit
		return BotManager.deployInstances.latestBuild.sort((a: Deployment, b: Deployment) => {
			if (a.botCount < b.botCount) return 1;
			if (a.botCount > b.botCount) return -1;
			return 0;
		}).filter((d: Deployment) => d.botCount < ENV.BOT_PER_INSTANCE_LIMIT)[0];
	}



}
